generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["clientExtensions"]
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String          @id @default(uuid())
    email            String          @unique
    fullName         String
    password         String
    linkedinUsername String?
    profile          Profile?
    jobs             Job[]
    experiences      Experience[]
    educations       Education[]
    projects         Project[]
    volunteerWorks   VolunteerWork[]
    cvs              Cv[]
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model Job {
    id          String   @id @default(uuid())
    title       String
    description String?
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Cv          Cv[]

    @@unique([id, userId])
}

model Profile {
    id         String   @id @default(uuid())
    occupation String?
    headline   String?
    summary    String?
    userId     String   @unique
    user       User     @relation(fields: [userId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Experience {
    id            String   @id @default(uuid())
    title         String
    description   String?
    company       String?
    startsAtDay   Int?
    startsAtMonth Int?
    startsAtYear  Int?
    endsAtDay     Int?
    endsAtMonth   Int?
    endsAtYear    Int?
    userId        String
    isSelected    Boolean  @default(true)
    user          User     @relation(fields: [userId], references: [id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Education {
    id            String   @id @default(uuid())
    school        String
    description   String?
    field         String?
    degreeName    String?
    grade         Int?
    startsAtDay   Int?
    startsAtMonth Int?
    startsAtYear  Int?
    endsAtDay     Int?
    endsAtMonth   Int?
    endsAtYear    Int?
    userId        String
    isSelected    Boolean  @default(true)
    user          User     @relation(fields: [userId], references: [id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Project {
    id            String   @id @default(uuid())
    title         String
    description   String?
    startsAtDay   Int?
    startsAtMonth Int?
    startsAtYear  Int?
    endsAtDay     Int?
    endsAtMonth   Int?
    endsAtYear    Int?
    userId        String
    isSelected    Boolean  @default(true)
    user          User     @relation(fields: [userId], references: [id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([id, userId])
}

model VolunteerWork {
    id            String   @id @default(uuid())
    title         String
    description   String?
    cause         String?
    company       String?
    startsAtDay   Int?
    startsAtMonth Int?
    startsAtYear  Int?
    endsAtDay     Int?
    endsAtMonth   Int?
    endsAtYear    Int?
    userId        String
    isSelected    Boolean  @default(true)
    user          User     @relation(fields: [userId], references: [id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Cv {
    id        String   @id @default(uuid())
    userId    String
    jobId     String
    text      String?
    user      User     @relation(fields: [userId], references: [id])
    job       Job      @relation(fields: [jobId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
